// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/MTES-MCT/filharmonic-api/models"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindEtablissementsByS3IC provides a mock function with given fields: s3ic
func (_m *Repository) FindEtablissementsByS3IC(s3ic string) ([]models.Etablissement, error) {
	ret := _m.Called(s3ic)

	var r0 []models.Etablissement
	if rf, ok := ret.Get(0).(func(string) []models.Etablissement); ok {
		r0 = rf(s3ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Etablissement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s3ic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *Repository) GetUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *Repository) GetUserByID(id int64) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
