// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "github.com/MTES-MCT/filharmonic-api/domain"
import mock "github.com/stretchr/testify/mock"
import models "github.com/MTES-MCT/filharmonic-api/models"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckEtatInspection provides a mock function with given fields: idInspection, etats
func (_m *Repository) CheckEtatInspection(idInspection int64, etats []models.EtatInspection) (bool, error) {
	ret := _m.Called(idInspection, etats)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, []models.EtatInspection) bool); ok {
		r0 = rf(idInspection, etats)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []models.EtatInspection) error); ok {
		r1 = rf(idInspection, etats)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckInspecteurAllowedInspection provides a mock function with given fields: ctx, idInspection
func (_m *Repository) CheckInspecteurAllowedInspection(ctx *domain.UserContext, idInspection int64) (bool, error) {
	ret := _m.Called(ctx, idInspection)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) bool); ok {
		r0 = rf(ctx, idInspection)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64) error); ok {
		r1 = rf(ctx, idInspection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserAllowedMessage provides a mock function with given fields: ctx, idMessage
func (_m *Repository) CheckUserAllowedMessage(ctx *domain.UserContext, idMessage int64) (bool, error) {
	ret := _m.Called(ctx, idMessage)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) bool); ok {
		r0 = rf(ctx, idMessage)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64) error); ok {
		r1 = rf(ctx, idMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserAllowedPointDeControle provides a mock function with given fields: ctx, idPointDeControle
func (_m *Repository) CheckUserAllowedPointDeControle(ctx *domain.UserContext, idPointDeControle int64) (bool, error) {
	ret := _m.Called(ctx, idPointDeControle)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) bool); ok {
		r0 = rf(ctx, idPointDeControle)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64) error); ok {
		r1 = rf(ctx, idPointDeControle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserIsRecipient provides a mock function with given fields: ctx, idMessage
func (_m *Repository) CheckUserIsRecipient(ctx *domain.UserContext, idMessage int64) (bool, error) {
	ret := _m.Called(ctx, idMessage)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) bool); ok {
		r0 = rf(ctx, idMessage)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64) error); ok {
		r1 = rf(ctx, idMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUsersInspecteurs provides a mock function with given fields: ids
func (_m *Repository) CheckUsersInspecteurs(ids []int64) (bool, error) {
	ret := _m.Called(ids)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]int64) bool); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCommentaire provides a mock function with given fields: ctx, idInspection, commentaire
func (_m *Repository) CreateCommentaire(ctx *domain.UserContext, idInspection int64, commentaire models.Commentaire) (int64, error) {
	ret := _m.Called(ctx, idInspection, commentaire)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64, models.Commentaire) int64); ok {
		r0 = rf(ctx, idInspection, commentaire)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64, models.Commentaire) error); ok {
		r1 = rf(ctx, idInspection, commentaire)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInspection provides a mock function with given fields: ctx, inspection
func (_m *Repository) CreateInspection(ctx *domain.UserContext, inspection models.Inspection) (int64, error) {
	ret := _m.Called(ctx, inspection)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domain.UserContext, models.Inspection) int64); ok {
		r0 = rf(ctx, inspection)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, models.Inspection) error); ok {
		r1 = rf(ctx, inspection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMessage provides a mock function with given fields: ctx, idPointDeControle, message
func (_m *Repository) CreateMessage(ctx *domain.UserContext, idPointDeControle int64, message models.Message) (int64, error) {
	ret := _m.Called(ctx, idPointDeControle, message)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64, models.Message) int64); ok {
		r0 = rf(ctx, idPointDeControle, message)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64, models.Message) error); ok {
		r1 = rf(ctx, idPointDeControle, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePointDeControle provides a mock function with given fields: ctx, idInspection, pointDeControle
func (_m *Repository) CreatePointDeControle(ctx *domain.UserContext, idInspection int64, pointDeControle models.PointDeControle) (int64, error) {
	ret := _m.Called(ctx, idInspection, pointDeControle)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64, models.PointDeControle) int64); ok {
		r0 = rf(ctx, idInspection, pointDeControle)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64, models.PointDeControle) error); ok {
		r1 = rf(ctx, idInspection, pointDeControle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePointDeControle provides a mock function with given fields: ctx, idPointDeControle
func (_m *Repository) DeletePointDeControle(ctx *domain.UserContext, idPointDeControle int64) error {
	ret := _m.Called(ctx, idPointDeControle)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) error); ok {
		r0 = rf(ctx, idPointDeControle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEtablissementsByS3IC provides a mock function with given fields: ctx, s3ic
func (_m *Repository) FindEtablissementsByS3IC(ctx *domain.UserContext, s3ic string) ([]models.Etablissement, error) {
	ret := _m.Called(ctx, s3ic)

	var r0 []models.Etablissement
	if rf, ok := ret.Get(0).(func(*domain.UserContext, string) []models.Etablissement); ok {
		r0 = rf(ctx, s3ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Etablissement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, string) error); ok {
		r1 = rf(ctx, s3ic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEtablissementByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetEtablissementByID(ctx *domain.UserContext, id int64) (*models.Etablissement, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Etablissement
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) *models.Etablissement); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Etablissement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInspectionByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetInspectionByID(ctx *domain.UserContext, id int64) (*models.Inspection, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Inspection
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) *models.Inspection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Inspection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *Repository) GetUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *Repository) GetUserByID(id int64) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LireMessage provides a mock function with given fields: ctx, idMessage
func (_m *Repository) LireMessage(ctx *domain.UserContext, idMessage int64) error {
	ret := _m.Called(ctx, idMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) error); ok {
		r0 = rf(ctx, idMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListInspections provides a mock function with given fields: ctx
func (_m *Repository) ListInspections(ctx *domain.UserContext) ([]models.Inspection, error) {
	ret := _m.Called(ctx)

	var r0 []models.Inspection
	if rf, ok := ret.Get(0).(func(*domain.UserContext) []models.Inspection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Inspection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.UserContext) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishPointDeControle provides a mock function with given fields: ctx, idPointDeControle
func (_m *Repository) PublishPointDeControle(ctx *domain.UserContext, idPointDeControle int64) error {
	ret := _m.Called(ctx, idPointDeControle)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64) error); ok {
		r0 = rf(ctx, idPointDeControle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEtatInspection provides a mock function with given fields: ctx, id, etat
func (_m *Repository) UpdateEtatInspection(ctx *domain.UserContext, id int64, etat models.EtatInspection) error {
	ret := _m.Called(ctx, id, etat)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64, models.EtatInspection) error); ok {
		r0 = rf(ctx, id, etat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInspection provides a mock function with given fields: ctx, inspection
func (_m *Repository) UpdateInspection(ctx *domain.UserContext, inspection models.Inspection) error {
	ret := _m.Called(ctx, inspection)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserContext, models.Inspection) error); ok {
		r0 = rf(ctx, inspection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePointDeControle provides a mock function with given fields: ctx, idPointDeControle, pointDeControle
func (_m *Repository) UpdatePointDeControle(ctx *domain.UserContext, idPointDeControle int64, pointDeControle models.PointDeControle) error {
	ret := _m.Called(ctx, idPointDeControle, pointDeControle)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserContext, int64, models.PointDeControle) error); ok {
		r0 = rf(ctx, idPointDeControle, pointDeControle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
